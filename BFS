import java.util.*;

public class BFS {
    static void bfs(int start, List<List<Integer>> graph) {
        boolean[] visited = new boolean[graph.size()];
        Queue<Integer> queue = new LinkedList<>();

        visited[start] = true;
        queue.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");

            for (int neighbor : graph.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        int n = 6; // number of nodes (0 to 5)
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());

        // Example edges (undirected graph)
        graph.get(0).addAll(List.of(1, 2));
        graph.get(1).addAll(List.of(0, 3, 4));
        graph.get(2).addAll(List.of(0, 5));
        graph.get(3).add(1);
        graph.get(4).add(1);
        graph.get(5).add(2);

        System.out.print("BFS starting from node 0: ");
        bfs(0, graph); // Output: 0 1 2 3 4 5
    }
}
