import java.util.*;

public class DFS {
    static void dfs(int node, boolean[] visited, List<List<Integer>> graph) {
        visited[node] = true;
        System.out.print(node + " ");

        for (int neighbor : graph.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, graph);
            }
        }
    }

    public static void main(String[] args) {
        int n = 6; // number of nodes
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());

        // Example undirected graph
        graph.get(0).addAll(List.of(1, 2));
        graph.get(1).addAll(List.of(0, 3, 4));
        graph.get(2).addAll(List.of(0, 5));
        graph.get(3).add(1);
        graph.get(4).add(1);
        graph.get(5).add(2);

        boolean[] visited = new boolean[n];
        System.out.print("DFS starting from node 0: ");
        dfs(0, visited, graph); // Output: 0 1 3 4 2 5
    }
}
